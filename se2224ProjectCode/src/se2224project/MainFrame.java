/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package se2224project;
import com.toedter.calendar.JDateChooser;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Date;
import javax.swing.JOptionPane;
import java.sql.Statement; 
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.Date;
import java.sql.ResultSetMetaData; 
import java.util.ArrayList;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author psk
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        getConnection();
        notificaitonDeadline();  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InsertTaskOpenButton = new javax.swing.JButton();
        ShowAllTasksButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        OrderbyPriorityButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        TaskNameTextField = new javax.swing.JTextField();
        ShortDesTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        DeadlineDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        PriorityTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        ReminderImgTextField = new javax.swing.JTextField();
        jDeleteButton = new javax.swing.JButton();
        jUpdateTaskButton = new javax.swing.JButton();
        startDateChooser = new com.toedter.calendar.JDateChooser();
        endDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        filterTasksButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jOrderByPriDateChooser1 = new com.toedter.calendar.JDateChooser();
        viewImageButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));

        InsertTaskOpenButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        InsertTaskOpenButton.setForeground(new java.awt.Color(0, 102, 102));
        InsertTaskOpenButton.setText("Insert Task");
        InsertTaskOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertTaskOpenButtonActionPerformed(evt);
            }
        });

        ShowAllTasksButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ShowAllTasksButton.setForeground(new java.awt.Color(0, 102, 102));
        ShowAllTasksButton.setText("Show All Tasks");
        ShowAllTasksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAllTasksButtonActionPerformed(evt);
            }
        });

        jTable1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 153, 153), new java.awt.Color(0, 102, 102), new java.awt.Color(0, 255, 204), new java.awt.Color(0, 204, 204)));
        jTable1.setForeground(new java.awt.Color(0, 102, 102));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task Name", "Short Describtion", "Deadline", "Priority", "Reminder Image"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Bauhaus 93", 2, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Your Task Planer");

        OrderbyPriorityButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        OrderbyPriorityButton.setForeground(new java.awt.Color(0, 102, 102));
        OrderbyPriorityButton.setText("Order by Priority");
        OrderbyPriorityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderbyPriorityButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Task Name:");

        jLabel3.setText("Short Description:");

        jLabel4.setText(" Deadline:");

        jLabel5.setText("Priority:");

        jLabel6.setText("Reminder Image:");

        jDeleteButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jDeleteButton.setForeground(new java.awt.Color(0, 102, 102));
        jDeleteButton.setText("Delete");
        jDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteButtonActionPerformed(evt);
            }
        });

        jUpdateTaskButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jUpdateTaskButton.setForeground(new java.awt.Color(0, 102, 102));
        jUpdateTaskButton.setText("Update Task");
        jUpdateTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateTaskButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Filter by Dates: ");

        jLabel8.setText("Starting Date: ");

        jLabel9.setText("End Date:");

        filterTasksButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        filterTasksButton.setForeground(new java.awt.Color(0, 102, 102));
        filterTasksButton.setText("Filter Tasks");
        filterTasksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterTasksButtonActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel10.setText("Order by Priority:");

        jLabel11.setText("Choose a date: ");

        viewImageButton.setText("View Task Image");
        viewImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewImageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jUpdateTaskButton)
                                .addGap(21, 21, 21)
                                .addComponent(jDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(InsertTaskOpenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ShowAllTasksButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(PriorityTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DeadlineDateChooser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                                    .addComponent(ShortDesTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TaskNameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ReminderImgTextField)))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel8))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(endDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                                            .addComponent(startDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(filterTasksButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel7)
                                .addGap(165, 165, 165)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(OrderbyPriorityButton)
                                    .addComponent(jOrderByPriDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(viewImageButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TaskNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(ShortDesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(DeadlineDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(PriorityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(ReminderImgTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ShowAllTasksButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jUpdateTaskButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(InsertTaskOpenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel7)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel11)
                            .addComponent(jOrderByPriDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(viewImageButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(OrderbyPriorityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(endDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addComponent(filterTasksButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(59, 59, 59))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

public Connection getConnection(){
Connection con = null;
    try {
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/se2224project" , "root" , "pelin2002");
        //JOptionPane. showMessageDialog (null,"Connected");
        return con;
    } catch (SQLException ex){
        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null,"Not connected"); 
        return null;
    }
}

public void notificaitonDeadline(){
try {
    Connection con = getConnection();
    Statement st = con.createStatement();

    // Retrieve tasks with 1 day left to their deadlines
    String sql = "SELECT TaskName, Deadline FROM task WHERE DATEDIFF(Deadline, CURDATE()) = 1";
    ResultSet rs = st.executeQuery(sql);

    StringBuilder message = new StringBuilder();
    while (rs.next()) {
        String taskName = rs.getString("TaskName");
        String deadline = rs.getString("Deadline");

        message.append("Task: ").append(taskName).append("\n")
                .append("Deadline: ").append(deadline).append("\n")
                .append("\n");
    }

    if (message.length() > 0) {
        // Display message dialog box with tasks that have 1 day left to their deadlines
        JOptionPane.showMessageDialog(null, "Tasks with 1 day left to their deadlines:\n\n" + message.toString());
    } else {
        // No tasks with 1 day left to their deadlines
        JOptionPane.showMessageDialog(null, "No tasks with 1 day left to their deadlines.");
    }

    con.close();
} catch (SQLException ex) {
    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
}

}

    private void OrderbyPriorityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderbyPriorityButtonActionPerformed
        // TODO add your handling code here:
         Date selectedDate = jOrderByPriDateChooser1.getDate();
    String selectedDateString = formatDate(selectedDate);

    try {
        Connection con = getConnection();
        PreparedStatement ps = con.prepareStatement("SELECT TaskName, ShortDescription, Deadline, Priority, ReminderImage FROM Task WHERE Deadline = ? ORDER BY Priority ASC");
        ps.setString(1, selectedDateString);
        ResultSet rs = ps.executeQuery();

        DefaultTableModel Df = (DefaultTableModel) jTable1.getModel();
        Df.setRowCount(0);

        while (rs.next()) {
            Vector<Object> rowData = new Vector<>();
            rowData.add(rs.getString("TaskName"));
            rowData.add(rs.getString("ShortDescription"));
            rowData.add(rs.getString("Deadline"));
            rowData.add(rs.getInt("Priority"));
            rowData.add(rs.getBoolean("ReminderImage"));

            Df.addRow(rowData);
        }

        rs.close();
        ps.close();
        con.close();
    } catch (SQLException ex) {
        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
    
    
        
        
    }//GEN-LAST:event_OrderbyPriorityButtonActionPerformed

    private void InsertTaskOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertTaskOpenButtonActionPerformed
       String taskName = TaskNameTextField.getText();
       String shortDesc = ShortDesTextField.getText();
       SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd");
       String deadline = dateFormat.format(DeadlineDateChooser.getDate());
       //int priority = Integer.parseInt(PriorityTextField.getText());
       boolean reminderImg = Boolean.parseBoolean(ReminderImgTextField.getText());
       String priorityText = PriorityTextField.getText(); 
       int priority = -1;
       
       if (!priorityText.isEmpty()) {
        priority = Integer.parseInt(priorityText);
}
      
       try {
        Connection con = getConnection();
        PreparedStatement ps = con.prepareStatement("INSERT INTO task (TaskName, ShortDescription, Deadline, Priority, ReminderImage) VALUES (?, ?, ?, ?, ?)", Statement.RETURN_GENERATED_KEYS);
        ps.setString(1, taskName);
        ps.setString(2, shortDesc);
        ps.setString(3, deadline);
        //ps.setInt(4, priority);
         if (priority != -1) {
        ps.setInt(4, priority);
    } else {
        ps.setNull(4, java.sql.Types.INTEGER);
    }
    
        ps.setBoolean(5, reminderImg); 
        int rowsInserted = ps.executeUpdate();
        if (rowsInserted > 0) {
            System.out.println("Data inserted successfully.");
             JOptionPane.showMessageDialog(null, "Task Inserted");
            ResultSet generatedKeys = ps.getGeneratedKeys();
        if (generatedKeys.next()) {
            int taskId = generatedKeys.getInt(1);
            System.out.println("Generated Task ID: " + taskId);
        }
    }
        ps.close();
        con.close();
} catch (SQLException ex) {
    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
}
        
    }//GEN-LAST:event_InsertTaskOpenButtonActionPerformed

    private void ShowAllTasksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAllTasksButtonActionPerformed
     try {
    Connection con = getConnection();
    Statement st = con.createStatement();

    String sql = "SELECT TaskName, ShortDescription, Deadline, Priority, ReminderImage FROM task";
    ResultSet rs = st.executeQuery(sql);
    DefaultTableModel Df = (DefaultTableModel) jTable1.getModel();
    Df.setRowCount(0);

    while (rs.next()) {
        Vector<Object> rowData = new Vector<>();
        rowData.add(rs.getString("TaskName"));
        rowData.add(rs.getString("ShortDescription"));
        rowData.add(rs.getString("Deadline"));
        rowData.add(rs.getString("Priority"));
        boolean reminderImg = rs.getBoolean("ReminderImage");
        rowData.add(reminderImg);

        Df.addRow(rowData);
    }

    con.close();
} catch (SQLException ex) {
    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
}
        
    }//GEN-LAST:event_ShowAllTasksButtonActionPerformed

    private void filterTasksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterTasksButtonActionPerformed
        // TODO add your handling code here:
        Date startDate = startDateChooser.getDate();
        Date endDate = endDateChooser.getDate();

    DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

    String startDateString = dateFormat.format(startDate);
    String endDateString = dateFormat.format(endDate);

    try {
        Connection con = getConnection();
        PreparedStatement ps = con.prepareStatement("SELECT TaskName, ShortDescription, Deadline, Priority, ReminderImage FROM task WHERE Deadline BETWEEN ? AND ?");
        ps.setString(1, startDateString);
        ps.setString(2, endDateString);

        ResultSet rs = ps.executeQuery();
        DefaultTableModel Df = (DefaultTableModel) jTable1.getModel();
        Df.setRowCount(0);

        while (rs.next()) {
            Vector<Object> rowData = new Vector<>();
            rowData.add(rs.getString("TaskName"));
            rowData.add(rs.getString("ShortDescription"));
            rowData.add(rs.getDate("Deadline"));
            rowData.add(rs.getInt("Priority"));
            rowData.add(rs.getBoolean("ReminderImage"));

            Df.addRow(rowData);
        }

        con.close();
    } catch (SQLException ex) {
        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_filterTasksButtonActionPerformed

    private Date parseDate(String dateString) {
    try {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        return dateFormat.parse(dateString);
    } catch (ParseException e) {
        return null;
    }
}

    private String formatDate(Date date) {
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    return dateFormat.format(date);
}
    
   
    private void jUpdateTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateTaskButtonActionPerformed
        // TODO add your handling code here:
       
    int selectedIndex = jTable1.getSelectedRow();

    if (selectedIndex == -1) {
        // No task is selected
        JOptionPane.showMessageDialog(this, "Please select a task to update.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Get the existing values from the table
    DefaultTableModel Df = (DefaultTableModel) jTable1.getModel();
    String oldTaskName = Df.getValueAt(selectedIndex, 0).toString();
    String oldShortDescription = Df.getValueAt(selectedIndex, 1).toString();
    String oldDeadlineString = Df.getValueAt(selectedIndex, 2).toString();
    int oldPriority = Integer.parseInt(Df.getValueAt(selectedIndex, 3).toString());
    boolean oldReminderImage = Boolean.parseBoolean(Df.getValueAt(selectedIndex, 4).toString());

    // Open a dialog or form for editing
    JTextField taskNameTextField = new JTextField(oldTaskName);
    JTextField shortDescriptionTextField = new JTextField(oldShortDescription);
    JDateChooser deadlineDateChooser = new JDateChooser();
    deadlineDateChooser.setDate(parseDate(oldDeadlineString));
    JTextField priorityTextField = new JTextField(String.valueOf(oldPriority));
    JTextField reminderImgTextField = new JTextField(String.valueOf(oldReminderImage));

    Object[] fields = {
        "Task Name:", taskNameTextField,
        "Short Description:", shortDescriptionTextField,
        "Deadline:", deadlineDateChooser,
        "Priority:", priorityTextField,
        "Reminder Image:", reminderImgTextField
    };

    int result = JOptionPane.showConfirmDialog(this, fields, "Edit Task", JOptionPane.OK_CANCEL_OPTION);
    if (result == JOptionPane.OK_OPTION) {
        // Retrieve the updated values from the text fields
        String newTaskName = taskNameTextField.getText();
        String newShortDescription = shortDescriptionTextField.getText();
        String newDeadlineString = formatDate(deadlineDateChooser.getDate());
        int newPriority = Integer.parseInt(priorityTextField.getText());
        boolean newReminderImage = Boolean.parseBoolean(reminderImgTextField.getText());

        try {
            Connection con = getConnection();
            PreparedStatement ps = con.prepareStatement("UPDATE Task SET TaskName=?, ShortDescription=?, Deadline=?, Priority=?, ReminderImage=? WHERE TaskName=?");
            ps.setString(1, newTaskName);
            ps.setString(2, newShortDescription);
            ps.setString(3, newDeadlineString);
            ps.setInt(4, newPriority);
            ps.setBoolean(5, newReminderImage);
            ps.setString(6, oldTaskName);

            int rowsUpdated = ps.executeUpdate();
            if (rowsUpdated > 0) {
                // Update the table with the updated values
                Df.setValueAt(newTaskName, selectedIndex, 0);
                Df.setValueAt(newShortDescription, selectedIndex, 1);
                Df.setValueAt(newDeadlineString, selectedIndex, 2);
                Df.setValueAt(newPriority, selectedIndex, 3);
                Df.setValueAt(newReminderImage, selectedIndex, 4);

                JOptionPane.showMessageDialog(this, "Task updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update the task.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            ps.close();
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
        
    }//GEN-LAST:event_jUpdateTaskButtonActionPerformed

   
   
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
       
        DefaultTableModel Df = (DefaultTableModel) jTable1.getModel();
        int selectedIndex = jTable1.getSelectedRow();
    
        TaskNameTextField.setText(Df.getValueAt(selectedIndex, 0).toString());
        ShortDesTextField.setText(Df.getValueAt(selectedIndex, 1).toString());
    
     String deadlineString = Df.getValueAt(selectedIndex, 2).toString();
         try {
             Date deadlineDate = new SimpleDateFormat("yyyy-MM-dd").parse(deadlineString);
             DeadlineDateChooser.setDate(deadlineDate);
    }    catch (ParseException ex) {
            
    }
        PriorityTextField.setText(Df.getValueAt(selectedIndex, 3).toString());
        ReminderImgTextField.setText(Df.getValueAt(selectedIndex, 4).toString()); 
    }//GEN-LAST:event_jTable1MouseClicked

    private void jDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteButtonActionPerformed
        deleteSelectedTask(); 
    }//GEN-LAST:event_jDeleteButtonActionPerformed

    private void viewImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewImageButtonActionPerformed
        // TODO add your handling code here:
    int selectedRow = jTable1.getSelectedRow();
        
        if (selectedRow != -1) {
            try {
                Connection con = getConnection();
                
                // Get the task ID from the database using the selected row index
                int selectedTaskId = 0;
                PreparedStatement selectPs = con.prepareStatement("SELECT Id FROM Task LIMIT ?, 1");
                selectPs.setInt(1, selectedRow);
                ResultSet selectRs = selectPs.executeQuery();
                
                if (selectRs.next()) {
                    selectedTaskId = selectRs.getInt("Id");
                }
                
                selectRs.close();
                selectPs.close();
                
                // Retrieve the reminder image value for the selected task
                boolean hasImage = false;
                PreparedStatement imagePs = con.prepareStatement("SELECT ReminderImage FROM Task WHERE Id = ?");
                imagePs.setInt(1, selectedTaskId);
                ResultSet imageRs = imagePs.executeQuery();
                
                if (imageRs.next()) {
                    hasImage = imageRs.getBoolean("ReminderImage");
                }
                
                imageRs.close();
                imagePs.close();
                con.close();
                
                 if (hasImage) {
                    String imagePath = "task_images/task" + selectedTaskId + ".jpg";
                    
                    JFrame imageFrame = new JFrame("Task Image");
                    JLabel imageLabel = new JLabel();
                    ImageIcon imageIcon = new ImageIcon(imagePath);
                    imageLabel.setIcon(imageIcon);
                    imageFrame.getContentPane().add(imageLabel);
                    
                    imageFrame.setSize(400, 400);
                    imageFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    imageFrame.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(null, "The task does not include an image.");
                }
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    
        
     
    }//GEN-LAST:event_viewImageButtonActionPerformed

    private void deleteSelectedTask() {
        int selectedIndex = jTable1.getSelectedRow();

        if (selectedIndex == -1) {
        // No task is selected
        JOptionPane.showMessageDialog(this, "Please select a task to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
        }

        DefaultTableModel Df = (DefaultTableModel) jTable1.getModel();
     String taskName = Df.getValueAt(selectedIndex, 0).toString();

        try {
            Connection con = getConnection();
            PreparedStatement ps = con.prepareStatement("DELETE FROM Task WHERE TaskName=?");
            ps.setString(1, taskName);

            int rowsDeleted = ps.executeUpdate();
        if (rowsDeleted > 0) {
            Df.removeRow(selectedIndex);
            JOptionPane.showMessageDialog(this, "Task deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete the task.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        ps.close();
        con.close();
    } catch (SQLException ex) {
        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DeadlineDateChooser;
    private javax.swing.JButton InsertTaskOpenButton;
    private javax.swing.JButton OrderbyPriorityButton;
    private javax.swing.JTextField PriorityTextField;
    private javax.swing.JTextField ReminderImgTextField;
    private javax.swing.JTextField ShortDesTextField;
    private javax.swing.JButton ShowAllTasksButton;
    private javax.swing.JTextField TaskNameTextField;
    private com.toedter.calendar.JDateChooser endDateChooser;
    private javax.swing.JButton filterTasksButton;
    private javax.swing.JButton jDeleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private com.toedter.calendar.JDateChooser jOrderByPriDateChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jUpdateTaskButton;
    private com.toedter.calendar.JDateChooser startDateChooser;
    private javax.swing.JButton viewImageButton;
    // End of variables declaration//GEN-END:variables
}
